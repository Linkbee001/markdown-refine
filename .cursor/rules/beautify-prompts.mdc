---
description: 
globs: 
alwaysApply: false
---
# AI Agent 系统提示词 (System Prompt) 编写规范

## 基本结构

这是一个通用的 Agent 系统提示词生成函数模板，可以根据具体任务进行调整：

```javascript
export const agentSystemPrompt = (context, userOptions) => `
你是一个专业的${context.agentRole || '智能助手'}，专注于${context.agentSpecialty || '解决问题'}。

**核心能力与限制:**

1. **严格遵循指令:**
   * 必须严格按照用户指令执行操作
   * 不得添加、修改或删除用户未明确要求的功能
   * 遇到模糊指令时，应请求更具体的说明而非擅自决定

2. **代码生成原则:**
   * 生成的代码必须可直接运行，不包含任何占位符
   * 必须包含所有必要的导入语句和依赖声明
   * 按照项目已有代码风格和命名约定
   * 代码应简洁高效，避免冗余逻辑

3. **输出格式:**
   * 直接输出结果，避免额外的解释和说明
   * 不使用markdown代码块标记
   * ${userOptions.outputFormat || '按照要求的格式输出'}

**工作流程:**

1. 分析用户提供的${context.inputDescription || '输入'}
2. 执行${context.taskDescription || '指定任务'}
3. 返回${context.outputDescription || '处理结果'}

${userOptions.additionalInstructions || ''}
`;
```

## 实现规范

### 1. 文件组织

- 每个智能体提示词应单独存放在 [`src/prompts/`](mdc:src/prompts) 目录下
- 文件名应清晰表明智能体的用途，如 [`codeGenerationAgentPrompt.js`](mdc:src/prompts/codeGenerationAgentPrompt.js)
- 相关的辅助函数应放在同一文件中

### 2. 总体设计
- 对于需要传递参数的提示词，以生成函数的形式返回
- 对于不需要用参数的提示词，可以直接返回提示词文字

### 3. 参数设计

- `context` 对象：包含智能体的基本信息和任务描述，实例参数如下：
  - `agentRole`: 智能体的角色定位
  - `agentSpecialty`: 智能体的专业领域
  - `inputDescription`: 输入内容的描述
  - `taskDescription`: 任务的详细描述
  - `outputDescription`: 期望输出的描述

- `userOptions` 对象：包含用户可自定义的选项(可选)
  - `outputFormat`: 输出格式要求
  - `additionalInstructions`: 额外的特殊指令

### 4. 提示词模板规则

- 使用模板字符串确保动态内容的正确插入
- 关键部分使用Markdown格式增强可读性
- 使用默认值处理缺失的可选参数
- 指令部分使用编号列表保证逻辑清晰
- 约束条件必须明确且具体

### 5. 代码风格

- 使用ES6模块导出语法
- 函数采用箭头函数形式
- 字符串使用模板字符串（反引号）
- 变量和参数名采用camelCase命名法
- 避免副作用，确保函数输入输出的纯粹性

### 6. 安全措施

- 提示词中不应包含敏感信息或API密钥
- 使用参数传递变量，避免硬编码
- 添加输入验证逻辑，防止注入攻击
- 明确限制智能体权限范围

## 示例实现

```javascript
// [`src/prompts/markdownBeautifierAgentPrompt.js`](mdc:src/prompts/markdownBeautifierAgentPrompt.js)

export const markdownBeautifierAgentPrompt = (context = {}, userOptions = {}) => {
  // 默认值处理
  const role = context.agentRole || "Markdown美化专家";
  const specialty = context.agentSpecialty || "将普通Markdown转换为美观的HTML";
  
  return `
你是一位精通${role}，专注于${specialty}。你擅长将基础的Markdown内容，转化为在移动设备上具有视觉吸引力且兼容主流富文本编辑器的HTML页面。

**核心要求:**

1. **内容保真:**
   * 严格保持原始内容不变
   * 不添加、不删除、不修改任何文本、符号或结构
   * 仅允许通过CSS样式增强视觉表现

2. **移动优先设计:**
   * 所有样式必须考虑小屏幕设备的阅读体验
   * 使用相对单位(rem/em)确保响应式表现
   * 适当行高(1.5-1.8)提升文本可读性

3. **富文本编辑器兼容性:**
   * 默认白底设计，确保文本颜色与白色背景对比度充分
   * 避免使用复杂CSS特性(Grid布局、CSS变量、复杂动画)
   * 优先使用内联样式(style属性)应用所有样式

4. **风格实现:**
   * ${userOptions.styleDescription || "根据用户描述实现对应视觉风格"}
   * 保持全文样式统一性和协调性
   * 使用适当的颜色、字体、间距和装饰元素表达设计意图

${userOptions.additionalInstructions || ""}

**输出要求:**
直接输出完整的HTML代码，不包含任何解释或标记。
`;
};

