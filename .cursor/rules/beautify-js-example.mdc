---
description:
globs:
alwaysApply: false
---
# JavaScript 美化器实现示例

本文档提供了 JavaScript 美化器的详细实现方案和最佳实践。

## 核心功能

JavaScript 美化器应具备以下核心功能：

1. **代码格式化**：规范缩进、空格和换行，使代码结构清晰
2. **代码压缩**：移除不必要的空白、注释和简化变量名以减小文件大小
3. **语法检查**：识别并报告 JavaScript 语法错误
4. **代码转换**：支持 ES6+ 转 ES5 等语法转换功能
5. **性能优化**：提供代码性能优化建议

## 美化配置选项

```javascript
const defaultJsBeautifyOptions = {
  indent_size: 2,               // 缩进大小
  indent_char: ' ',             // 缩进字符
  max_preserve_newlines: 2,     // 保留的最大连续空行数
  preserve_newlines: true,      // 是否保留原有的换行
  keep_array_indentation: false, // 保持数组缩进
  break_chained_methods: false, // 是否在链式方法调用后换行
  indent_scripts: "normal",     // script 标签缩进风格
  brace_style: "collapse",      // 大括号风格
  space_before_conditional: true, // 条件语句前空格
  unescape_strings: false,      // 是否还原转义字符串
  jslint_happy: false,          // 是否使用 JSLint 的严格风格
  end_with_newline: false,      // 文件末尾是否添加换行
  wrap_line_length: 0,          // 每行最大字符数，0表示不限制
  indent_inner_html: false,     // 是否缩进 HTML 代码
  comma_first: false,           // 逗号是否放在行首
  e4x: false,                   // 是否支持 JSX
  space_after_anon_function: false, // 匿名函数后空格
};
```

## 示例实现

```javascript
import { js as beautifyJs } from 'js-beautify';
import * as babel from '@babel/core';
import * as eslint from 'eslint';
import * as UglifyJS from 'uglify-js';

/**
 * JavaScript 美化处理函数
 * @param {string} code - 原始 JavaScript 代码
 * @param {Object} options - 美化选项
 * @returns {Promise<Object>} - 美化结果
 */
export async function beautifyJsCode(code, options = {}) {
  // 合并默认选项和用户选项
  const mergedOptions = { ...defaultJsBeautifyOptions, ...options };
  
  try {
    let result = code;
    let errors = [];
    let warnings = [];
    
    // 语法检查
    if (options.lint) {
      const lintResults = await lintCode(code, options.lintConfig);
      
      errors = lintResults.errors;
      warnings = lintResults.warnings;
      
      if (errors.length > 0 && !options.ignoreErrors) {
        throw new Error('JavaScript 代码包含语法错误，请修复后再美化');
      }
    }
    
    // 代码转换
    if (options.transform) {
      const transformed = await transformCode(code, options.transformConfig);
      result = transformed.code;
      
      if (transformed.warnings.length > 0) {
        warnings = [...warnings, ...transformed.warnings];
      }
    }
    
    // 代码压缩
    if (options.minify) {
      const minified = UglifyJS.minify(result, {
        compress: {
          drop_console: options.dropConsole,
          dead_code: true,
          conditionals: true,
          comparisons: true,
          evaluate: true,
          booleans: true,
          loops: true,
          unused: true,
        },
        mangle: options.mangle,
        output: {
          comments: options.preserveComments ? 'some' : false,
        },
      });
      
      if (minified.error) {
        throw new Error(`JavaScript 压缩失败: ${minified.error.message}`);
      }
      
      result = minified.code;
    } 
    // 代码美化
    else {
      result = beautifyJs(result, {
        indent_size: mergedOptions.indent_size,
        indent_char: mergedOptions.indent_char,
        max_preserve_newlines: mergedOptions.max_preserve_newlines,
        preserve_newlines: mergedOptions.preserve_newlines,
        keep_array_indentation: mergedOptions.keep_array_indentation,
        break_chained_methods: mergedOptions.break_chained_methods,
        indent_scripts: mergedOptions.indent_scripts,
        brace_style: mergedOptions.brace_style,
        space_before_conditional: mergedOptions.space_before_conditional,
        unescape_strings: mergedOptions.unescape_strings,
        jslint_happy: mergedOptions.jslint_happy,
        end_with_newline: mergedOptions.end_with_newline,
        wrap_line_length: mergedOptions.wrap_line_length,
        indent_inner_html: mergedOptions.indent_inner_html,
        comma_first: mergedOptions.comma_first,
        e4x: mergedOptions.e4x,
        space_after_anon_function: mergedOptions.space_after_anon_function,
      });
    }
    
    return {
      code: result,
      errors,
      warnings,
    };
  } catch (error) {
    console.error('JavaScript 美化失败:', error);
    throw new Error(`JavaScript 美化失败: ${error.message}`);
  }
}

/**
 * 代码语法检查
 * @param {string} code - JavaScript 代码
 * @param {Object} config - ESLint 配置
 * @returns {Promise<Object>} - 检查结果
 */
async function lintCode(code, config = {}) {
  const linter = new eslint.Linter();
  
  // 设置默认 ESLint 配置
  const defaultConfig = {
    parserOptions: {
      ecmaVersion: 2021,
      sourceType: 'module',
      ecmaFeatures: {
        jsx: true,
      },
    },
    env: {
      browser: true,
      node: true,
      es6: true,
    },
    rules: {
      'no-undef': 'error',
      'no-unused-vars': 'warn',
      'no-console': 'warn',
      'semi': ['error', 'always'],
    },
  };
  
  const mergedConfig = { ...defaultConfig, ...config };
  const results = linter.verify(code, mergedConfig);
  
  const errors = [];
  const warnings = [];
  
  results.forEach(result => {
    const issue = {
      message: result.message,
      line: result.line,
      column: result.column,
      ruleId: result.ruleId,
    };
    
    if (result.severity === 2) {
      errors.push(issue);
    } else {
      warnings.push(issue);
    }
  });
  
  return { errors, warnings };
}

/**
 * 代码转换（例如 ES6 转 ES5）
 * @param {string} code - JavaScript 代码
 * @param {Object} config - Babel 配置
 * @returns {Promise<Object>} - 转换结果
 */
async function transformCode(code, config = {}) {
  // 设置默认 Babel 配置
  const defaultConfig = {
    presets: [
      ['@babel/preset-env', {
        targets: {
          browsers: ['last 2 versions', 'not dead'],
        },
      }],
    ],
    plugins: [],
  };
  
  const mergedConfig = { ...defaultConfig, ...config };
  const result = await babel.transformAsync(code, mergedConfig);
  
  return {
    code: result.code,
    warnings: [], // Babel 目前没有直接的警告收集机制，需要自行实现
  };
}
```

## React 组件实现

```jsx
import React, { useState, useEffect } from 'react';
import { beautifyJsCode } from '../utils/js-beautifier';
import { Button, Checkbox, Input, Select, Tabs, Alert, Tooltip } from '../components/ui';
import { useTranslation } from '../i18n';

const JsBeautifier = () => {
  const { t } = useTranslation();
  const [jsInput, setJsInput] = useState('');
  const [beautifiedJs, setBeautifiedJs] = useState('');
  const [errors, setErrors] = useState([]);
  const [warnings, setWarnings] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [activeTab, setActiveTab] = useState('beautify');
  const [options, setOptions] = useState({
    indent_size: 2,
    indent_char: ' ',
    preserve_newlines: true,
    max_preserve_newlines: 2,
    brace_style: 'collapse',
    keep_array_indentation: false,
    break_chained_methods: false,
    space_before_conditional: true,
    unescape_strings: false,
    jslint_happy: false,
    wrap_line_length: 0,
    comma_first: false,
    minify: false,
    lint: true,
    transform: false,
    mangle: true,
    dropConsole: false,
    preserveComments: true,
    ignoreErrors: false,
  });

  // 处理选项更改
  const handleOptionChange = (option, value) => {
    setOptions({ ...options, [option]: value });
  };

  // 处理美化
  const handleBeautify = async () => {
    if (!jsInput.trim()) return;

    setIsProcessing(true);
    setErrors([]);
    setWarnings([]);

    try {
      // 美化 JavaScript
      const result = await beautifyJsCode(jsInput, options);
      setBeautifiedJs(result.code);
      setErrors(result.errors);
      setWarnings(result.warnings);
    } catch (error) {
      console.error(error);
      setErrors([
        {
          message: error.message,
          line: 0,
          column: 0,
        }
      ]);
    } finally {
      setIsProcessing(false);
    }
  };

  // 复制结果
  const handleCopyResult = () => {
    navigator.clipboard.writeText(beautifiedJs);
    alert(t('jsBeautifier.messages.copied'));
  };

  // 清空输入
  const handleClearInput = () => {
    setJsInput('');
    setBeautifiedJs('');
    setErrors([]);
    setWarnings([]);
  };

  // 切换到压缩模式
  useEffect(() => {
    if (options.minify) {
      // 压缩模式下的默认选项
      setOptions(prev => ({
        ...prev,
        preserve_newlines: false,
        wrap_line_length: 0,
      }));
    }
  }, [options.minify]);

  return (
    <div className="js-beautifier">
      <h1>{t('jsBeautifier.title')}</h1>
      <p>{t('jsBeautifier.description')}</p>

      <Tabs 
        activeKey={activeTab} 
        onChange={setActiveTab}
        items={[
          { key: 'beautify', label: t('jsBeautifier.tabs.beautify') },
          { key: 'options', label: t('jsBeautifier.tabs.options') }
        ]}
      />

      {activeTab === 'options' && (
        <div className="options-panel">
          <div className="option-group">
            <h3>{t('jsBeautifier.optionsTitle')}</h3>
            
            <div className="option">
              <label>{t('jsBeautifier.options.minify')}</label>
              <Checkbox
                checked={options.minify}
                onChange={(e) => handleOptionChange('minify', e.target.checked)}
              />
              <Tooltip title={t('jsBeautifier.tooltips.minify')}>
                <span className="help-icon">?</span>
              </Tooltip>
            </div>
            
            <div className="option">
              <label>{t('jsBeautifier.options.lint')}</label>
              <Checkbox
                checked={options.lint}
                onChange={(e) => handleOptionChange('lint', e.target.checked)}
              />
              <Tooltip title={t('jsBeautifier.tooltips.lint')}>
                <span className="help-icon">?</span>
              </Tooltip>
            </div>
            
            <div className="option">
              <label>{t('jsBeautifier.options.transform')}</label>
              <Checkbox
                checked={options.transform}
                onChange={(e) => handleOptionChange('transform', e.target.checked)}
              />
              <Tooltip title={t('jsBeautifier.tooltips.transform')}>
                <span className="help-icon">?</span>
              </Tooltip>
            </div>
            
            {!options.minify && (
              <>
                <div className="option">
                  <label>{t('jsBeautifier.options.indentSize')}</label>
                  <Select
                    value={options.indent_size}
                    onChange={(value) => handleOptionChange('indent_size', value)}
                    options={[2, 4, 8].map(size => ({ label: size, value: size }))}
                  />
                </div>
                
                <div className="option">
                  <label>{t('jsBeautifier.options.preserveNewlines')}</label>
                  <Checkbox
                    checked={options.preserve_newlines}
                    onChange={(e) => handleOptionChange('preserve_newlines', e.target.checked)}
                  />
                </div>
                
                <div className="option">
                  <label>{t('jsBeautifier.options.braceStyle')}</label>
                  <Select
                    value={options.brace_style}
                    onChange={(value) => handleOptionChange('brace_style', value)}
                    options={[
                      { label: t('jsBeautifier.options.braceStyleOptions.collapse'), value: 'collapse' },
                      { label: t('jsBeautifier.options.braceStyleOptions.expand'), value: 'expand' },
                      { label: t('jsBeautifier.options.braceStyleOptions.endExpand'), value: 'end-expand' }
                    ]}
                  />
                </div>
                
                <div className="option">
                  <label>{t('jsBeautifier.options.wrapLineLength')}</label>
                  <Input
                    type="number"
                    value={options.wrap_line_length}
                    onChange={(e) => handleOptionChange('wrap_line_length', parseInt(e.target.value) || 0)}
                    min={0}
                    max={200}
                  />
                </div>
                
                <div className="option">
                  <label>{t('jsBeautifier.options.keepArrayIndentation')}</label>
                  <Checkbox
                    checked={options.keep_array_indentation}
                    onChange={(e) => handleOptionChange('keep_array_indentation', e.target.checked)}
                  />
                </div>
                
                <div className="option">
                  <label>{t('jsBeautifier.options.breakChainedMethods')}</label>
                  <Checkbox
                    checked={options.break_chained_methods}
                    onChange={(e) => handleOptionChange('break_chained_methods', e.target.checked)}
                  />
                </div>
                
                <div className="option">
                  <label>{t('jsBeautifier.options.jslintHappy')}</label>
                  <Checkbox
                    checked={options.jslint_happy}
                    onChange={(e) => handleOptionChange('jslint_happy', e.target.checked)}
                  />
                  <Tooltip title={t('jsBeautifier.tooltips.jslintHappy')}>
                    <span className="help-icon">?</span>
                  </Tooltip>
                </div>
                
                <div className="option">
                  <label>{t('jsBeautifier.options.commaFirst')}</label>
                  <Checkbox
                    checked={options.comma_first}
                    onChange={(e) => handleOptionChange('comma_first', e.target.checked)}
                  />
                </div>
              </>
            )}
            
            {options.minify && (
              <>
                <div className="option">
                  <label>{t('jsBeautifier.options.mangle')}</label>
                  <Checkbox
                    checked={options.mangle}
                    onChange={(e) => handleOptionChange('mangle', e.target.checked)}
                  />
                  <Tooltip title={t('jsBeautifier.tooltips.mangle')}>
                    <span className="help-icon">?</span>
                  </Tooltip>
                </div>
                
                <div className="option">
                  <label>{t('jsBeautifier.options.dropConsole')}</label>
                  <Checkbox
                    checked={options.dropConsole}
                    onChange={(e) => handleOptionChange('dropConsole', e.target.checked)}
                  />
                </div>
              </>
            )}
            
            <div className="option">
              <label>{t('jsBeautifier.options.preserveComments')}</label>
              <Checkbox
                checked={options.preserveComments}
                onChange={(e) => handleOptionChange('preserveComments', e.target.checked)}
              />
            </div>
            
            <div className="option">
              <label>{t('jsBeautifier.options.ignoreErrors')}</label>
              <Checkbox
                checked={options.ignoreErrors}
                onChange={(e) => handleOptionChange('ignoreErrors', e.target.checked)}
              />
              <Tooltip title={t('jsBeautifier.tooltips.ignoreErrors')}>
                <span className="help-icon">?</span>
              </Tooltip>
            </div>
          </div>
        </div>
      )}

      {activeTab === 'beautify' && (
        <div className="input-output-container">
          <div className="input-panel">
            <h3>{t('jsBeautifier.inputTitle')}</h3>
            <Input.TextArea
              value={jsInput}
              onChange={(e) => setJsInput(e.target.value)}
              placeholder={t('jsBeautifier.placeholders.input')}
              rows={15}
            />
          </div>
          
          {(errors.length > 0 || warnings.length > 0) && (
            <div className="validation-panel">
              {errors.length > 0 && (
                <Alert
                  type="error"
                  message={t('jsBeautifier.validationErrors')}
                  description={
                    <ul className="error-list">
                      {errors.map((error, index) => (
                        <li key={`error-${index}`}>
                          {error.line > 0 ? `[${error.line}:${error.column}] ` : ''}
                          {error.message} {error.ruleId ? `(${error.ruleId})` : ''}
                        </li>
                      ))}
                    </ul>
                  }
                />
              )}
              
              {warnings.length > 0 && (
                <Alert
                  type="warning"
                  message={t('jsBeautifier.validationWarnings')}
                  description={
                    <ul className="warning-list">
                      {warnings.map((warning, index) => (
                        <li key={`warning-${index}`}>
                          {warning.line > 0 ? `[${warning.line}:${warning.column}] ` : ''}
                          {warning.message} {warning.ruleId ? `(${warning.ruleId})` : ''}
                        </li>
                      ))}
                    </ul>
                  }
                />
              )}
            </div>
          )}
          
          <div className="actions">
            <Button 
              onClick={handleBeautify} 
              disabled={isProcessing || !jsInput.trim()}
              loading={isProcessing}
              type="primary"
            >
              {options.minify 
                ? t('jsBeautifier.actions.minify') 
                : t('jsBeautifier.actions.beautify')}
            </Button>
            
            <Button onClick={handleClearInput}>
              {t('jsBeautifier.actions.clearInput')}
            </Button>
            
            {beautifiedJs && (
              <Button onClick={handleCopyResult}>
                {t('jsBeautifier.actions.copy')}
              </Button>
            )}
          </div>
          
          {beautifiedJs && (
            <div className="output-panel">
              <h3>{t('jsBeautifier.outputTitle')}</h3>
              <pre className="beautified-js">{beautifiedJs}</pre>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default JsBeautifier;
```

## 翻译示例

```javascript
// zh-CN.js
export default {
  jsBeautifier: {
    title: 'JavaScript 美化器',
    description: '格式化、压缩和转换您的 JavaScript 代码',
    optionsTitle: '美化选项',
    inputTitle: '输入 JavaScript',
    outputTitle: '美化后的 JavaScript',
    validationErrors: '错误',
    validationWarnings: '警告',
    tabs: {
      beautify: '美化',
      options: '选项'
    },
    options: {
      minify: '压缩模式',
      lint: '语法检查',
      transform: 'ES6+ 转换',
      indentSize: '缩进大小',
      preserveNewlines: '保留换行',
      braceStyle: '大括号样式',
      braceStyleOptions: {
        collapse: '折叠',
        expand: '展开',
        endExpand: '末尾展开'
      },
      wrapLineLength: '行包装长度',
      keepArrayIndentation: '保持数组缩进',
      breakChainedMethods: '链式方法换行',
      jslintHappy: 'JSLint 严格风格',
      commaFirst: '逗号前置',
      mangle: '变量名混淆',
      dropConsole: '移除 console',
      preserveComments: '保留注释',
      ignoreErrors: '忽略错误'
    },
    tooltips: {
      minify: '压缩模式将移除所有不必要的空白和格式化',
      lint: '分析代码并检查语法和潜在问题',
      transform: '将 ES6+ 代码转换为兼容性更好的 ES5 代码',
      jslintHappy: '使用 JSLint 推荐的代码风格',
      mangle: '缩短变量名来减小文件大小',
      ignoreErrors: '即使发现语法错误也继续处理'
    },
    actions: {
      beautify: '美化',
      minify: '压缩',
      clearInput: '清空输入',
      copy: '复制结果'
    },
    placeholders: {
      input: '在此粘贴您的 JavaScript 代码...'
    },
    messages: {
      copied: '已复制到剪贴板！'
    }
  }
}

// en-US.js
export default {
  jsBeautifier: {
    title: 'JavaScript Beautifier',
    description: 'Format, minify and transform your JavaScript code',
    optionsTitle: 'Beautify Options',
    inputTitle: 'Input JavaScript',
    outputTitle: 'Beautified JavaScript',
    validationErrors: 'Errors',
    validationWarnings: 'Warnings',
    tabs: {
      beautify: 'Beautify',
      options: 'Options'
    },
    options: {
      minify: 'Minify Mode',
      lint: 'Syntax Check',
      transform: 'ES6+ Transform',
      indentSize: 'Indent Size',
      preserveNewlines: 'Preserve Newlines',
      braceStyle: 'Brace Style',
      braceStyleOptions: {
        collapse: 'Collapse',
        expand: 'Expand',
        endExpand: 'End Expand'
      },
      wrapLineLength: 'Wrap Line Length',
      keepArrayIndentation: 'Keep Array Indentation',
      breakChainedMethods: 'Break Chained Methods',
      jslintHappy: 'JSLint Strict Style',
      commaFirst: 'Comma First',
      mangle: 'Mangle Variables',
      dropConsole: 'Remove Console',
      preserveComments: 'Preserve Comments',
      ignoreErrors: 'Ignore Errors'
    },
    tooltips: {
      minify: 'Minify mode removes all unnecessary whitespace and formatting',
      lint: 'Analyze code and check for syntax issues and potential problems',
      transform: 'Convert ES6+ code to more compatible ES5 code',
      jslintHappy: 'Use code style recommended by JSLint',
      mangle: 'Shorten variable names to reduce file size',
      ignoreErrors: 'Continue processing even when syntax errors are found'
    },
    actions: {
      beautify: 'Beautify',
      minify: 'Minify',
      clearInput: 'Clear Input',
      copy: 'Copy Result'
    },
    placeholders: {
      input: 'Paste your JavaScript code here...'
    },
    messages: {
      copied: 'Copied to clipboard!'
    }
  }
}
```

## 最佳实践

1. **代码质量**
   - 提供实时语法错误和警告反馈
   - 基于业界标准（如 Airbnb、Google 或 Standard）提供代码风格指南

2. **性能优化**
   - 对大型代码文件使用 Web Workers 进行处理
   - 实现延迟执行和增量处理以保持 UI 响应性

3. **安全考虑**
   - 避免使用 `eval()` 或其他潜在的不安全函数
   - 在客户端运行前验证和净化代码

4. **兼容性**
   - 支持多种 JavaScript 规范和版本
   - 提供针对特定浏览器的兼容性检查

5. **实用功能**
   - 提供常见代码片段插入功能
   - 实现代码对比查看功能
   - 提供自定义代码风格预设和保存功能

6. **可访问性**
   - 支持键盘导航和操作
   - 确保足够的颜色对比度
   - 提供适当的错误提示和指引

7. **国际化**
   - 所有用户界面文本支持多语言显示
   - 考虑不同文化和语言环境下的用户体验
</rewritten_file>
