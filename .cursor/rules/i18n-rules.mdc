---
description:
globs:
alwaysApply: false
---
# 多语言国际化规范

## 基本原则

1. **开发语言与文案分离**
   - 所有UI文案必须从代码中抽离，放置在语言配置文件中
   - 禁止在组件中硬编码文本内容
   - 所有文本必须通过翻译函数调用展示

2. **翻译键命名规范**
   - 使用点号(.)分隔的命名空间结构
   - 按功能模块组织翻译键，例如：`common.save`、`beautifier.title`
   - 使用小驼峰命名法
   - 命名应具有描述性，避免过于通用的名称

3. **语言文件结构**
   - 语言文件存放在 `src/i18n/locales` 目录下
   - 每种语言对应一个文件，例如：`zh-CN.js`、`en-US.js`
   - 文件内按功能模块分组组织翻译内容
   - 所有语言文件必须具有相同的键结构

## 语言支持

当前支持的语言：
- 简体中文 (zh-CN) - 默认语言
- 英文 (en-US)

## 实现机制

1. **Provider机制**
   - 使用React Context实现全局翻译状态
   - 通过Provider包装整个应用，提供翻译能力
   - 在应用启动时加载当前语言配置

2. **语言切换**
   - 用户可通过UI界面切换语言
   - 语言偏好存储在localStorage中
   - 支持根据浏览器设置自动检测默认语言

3. **翻译调用方式**
   - 使用提供的Hook：`const { t } = useTranslation()`
   - 使用点号路径获取翻译：`t('common.save')`
   - 支持参数化翻译：`t('common.exportAs', { format: 'HTML' })`

## 开发规范

1. **添加新组件**
   - 新组件必须使用翻译函数展示文本
   - 所有文本必须先添加到对应语言文件中
   - 使用`useTranslation` Hook获取翻译函数

2. **添加新语言**
   - 在`src/i18n/config.js`的`locales`数组中添加新语言代码
   - 在`src/i18n/locales`目录下添加对应语言文件
   - 确保翻译文件包含所有已存在的翻译键
   - 更新`getLanguageName`函数以提供语言显示名称

3. **参数化处理**
   - 对于包含可变内容的文本使用参数化处理
   - 参数使用花括号包裹：`'Hello, {name}'`
   - 翻译调用时传入参数对象：`t('greeting', { name: 'John' })`
   - 确保所有翻译语言中的参数名称一致

4. **维护和更新**
   - 修改已有文本时，必须同步更新所有语言文件
   - 定期检查缺失的翻译项
   - 使用TypeScript可提供更好的类型检查（后续优化）

## 最佳实践

1. **避免拼接翻译**
   - 错误：`t('common.hello') + name + t('common.welcome')`
   - 正确：`t('common.welcome_user', { name })`

2. **处理复数形式**
   - 为复数情况提供单独的翻译键
   - 考虑不同语言的复数规则差异

3. **格式化日期和数字**
   - 使用`Intl.DateTimeFormat`和`Intl.NumberFormat`处理日期和数字的本地化
   - 根据当前语言环境自动调整格式

4. **测试和验证**
   - 在不同语言环境下测试UI
   - 检查文本溢出和布局问题
   - 确保所有翻译键都有对应的翻译
