---
description: 
globs: 
alwaysApply: true
---
# 项目概览：Markdown 美化器 (Markdown Beautifier)

## 核心功能

本项目是一个 AI 驱动的 Markdown 美化工具，旨在帮助用户优化 Markdown 文档的格式和样式，生成专业美观的 HTML 输出，并提供文档结构大纲。

主要功能点包括：
- **AI 美化**: 利用大型语言模型 (LLM) 根据用户提供的样式提示（**可选择先进行 AI 润色和扩写**）美化 Markdown 内容。
- **文档大纲生成**: 自动分析文档结构并生成可交互的大纲。
- **HTML 导出**: 主要输出格式为带有内联样式的 HTML。
- **国际化**: 支持多语言界面 (中文、英文)。

## 技术栈与实现关键点

### 技术栈
- **前端**: Next.js (App Router), React, Material UI (MUI), 使用pnpm作为包管理工具
- **后端**: Next.js API Routes
- **AI/LLM**: LangChain.js (@langchain/langgraph, @langchain/openai), 支持 OpenRouter, OpenAI, Anthropic 等提供商。
- **Markdown 解析**: `marked` 库。
- **服务器端 DOM 操作**: `jsdom` 库。
- **配置**: 使用 [`.env.local`](mdc:.env.local) 文件管理 API 密钥、模型名称、基础 URL 等敏感信息和环境配置。

### 实现细节

#### 后端 API (`/api/beautify` - [`src/app/api/beautify/route.js`](mdc:src/app/api/beautify/route.js))

后端是核心处理逻辑所在，通过一个 POST API 端点接收 Markdown 内容和用户样式提示 (prompt)，并利用 LangGraph 构建了一个多步骤的 AI 处理流水线：

1.  **`parse_markdown`**: 使用 `marked` 将传入的 Markdown 转换为基础 HTML。使用 `jsdom` 进行初步的 HTML 清理和基础结构标记 (添加 CSS 类和 ID)。
2.  **`analyze_paragraphs`**: 调用 LLM (通过 `invokeLlm` 封装) 分析 HTML 内容，识别段落、标题等结构，并添加特定的 CSS 类 (`paragraph-component`) 和唯一的 ID。此步骤依赖 `analyzeParagraphStructureSystemPrompt`。
3.  **`generate_outline`**: 调用 LLM (使用特定模型如 `AI_OUTLINE_MODEL` 和低 `temperature`)，根据上一步带有结构标记的 HTML 生成 JSON 格式的文档大纲。此步骤依赖 `generateDocumentOutlineSystemPrompt`。
4.  **`refine_user_prompt` (新增)**: 调用 LLM (如果用户提供了 prompt 且配置了 API Key)，根据 `refineUserPromptSystemPrompt` 的指示，对用户原始的样式提示进行理解、丰富和扩写，生成一个更详细的 `refinedUserPrompt`。
5.  **`beautify_html`**: 核心美化步骤。调用 LLM，结合**经过润色的提示词 (`refinedUserPrompt`，如果可用) 或原始用户提示 (`userPrompt`)**，以及预设的 `beautifyHtmlLlmAdditionalInstructions`，指示 LLM 修改 HTML，主要是通过添加内联样式 (`style="..."`) 来实现视觉美化。此步骤依赖 `beautifySystemPromptGenerate` 函数，该函数会**动态加载 `src/prompts/templates/basic/` 目录下的 `.md` 文件**作为详细的组件样式指令，并结合（润色后的）用户提示生成最终的系统提示。
6.  **`finalize_html`**: 将经过美化的 HTML 内容 (`styledHtml`) 包装在一个完整的 HTML 骨架中，包含基础的 CSS 样式，形成最终可供前端渲染的 `finalHtml`。

**关键辅助函数/概念**:
- `LLM_CONFIG`: 从环境变量读取所有 AI 相关配置。
- `createLlmInstance`: 根据配置创建 `ChatOpenAI` 实例。
- `invokeLlm`: 封装了 LLM 调用逻辑，包括构建消息、发送请求、清理响应 (去除代码块标记、解析 JSON) 和错误处理。
- **Prompts**: 复杂的 LLM 指令被分离到 `src/prompts/` 目录下的独立文件中：
    - **核心系统提示**: 如 `analyzeParagraphStructurePrompt.js`, `generateDocumentOutlinePrompt.js`, `refineUserPrompt.js`。
    - **美化主框架**: `beautifySystemPrompt.js` (负责加载模板并组合)。
    - **组件样式模板**: `src/prompts/templates/basic/*.md` (包含各 HTML 元素的具体样式要求)。
    - **附加指令**: `beautifyHtmlLlmInstructions.js` (提供给美化 LLM 的额外通用规则)。

#### 前端 (推测)

根据项目结构和后端 API 的响应，前端主要负责：
- 提供用户界面 (使用 React 和 Material UI)，包括 Markdown 编辑器、样式提示输入框、预览区域和大纲显示区域。
- 将用户输入打包发送到 `/api/beautify` 端点。
- 接收后端返回的 `finalHtml` 和 `documentOutline` 数据。
- 将 `finalHtml` 渲染到预览区域（可能通过 `dangerouslySetInnerHTML` 或 iframe）。
- 基于 `documentOutline` 数据渲染可交互的文档大纲。

#### 国际化

详细的国际化配置和实现请参考 [`i18n-setup-zh.mdc`](mdc:.cursor/rules/i18n-setup-zh.mdc)。

# 前端 UI 布局结构 (中文)

本应用的前端界面主要采用多区域布局，方便用户输入、控制、预览和导航。

## 1. 顶栏 (Header/Toolbar)

*   **功能**: 提供全局操作和信息展示。
*   **显示**: 通常包含应用标题/Logo 和语言切换器。
*   **关联组件**:
    *   可能是 [`src/app/layout.js`](mdc:src/app/layout.js) 或其子组件的一部分。
    *   语言切换器: [`src/components/LanguageSwitcher.js`](mdc:src/components/LanguageSwitcher.js)。

## 2. 主内容区 (Main Content Area)

这是应用的核心交互区域，通常水平或垂直划分为以下几个模块：

### 2.1. 输入区 (Input Area)

*   **功能**: 供用户粘贴或编辑原始 Markdown 文本。
*   **显示**: 一个文本编辑器（可能是简单的 `<textarea>` 或集成 Monaco Editor/CodeMirror 等）。
*   **关联组件**: 可能是 `src/components/MarkdownEditor.js` 或类似组件 (具体名称需确认)。

### 2.2. 控制面板 (Control Panel)

*   **功能**: 用户输入样式提示、触发美化操作、配置 AI 选项。
*   **显示**:
    *   一个文本输入框用于填写样式提示 (`prompt`)。
    *   (可能) 一个开关或复选框，用于启用/禁用 AI 对提示词的润色 (`refine_user_prompt`)。
    *   一个"美化"或"处理"按钮，用于触后端 API 调用。
*   **关联组件**: 可能是 `src/components/ControlPanel.js` 或类似组件，包含 MUI 的输入框、按钮等。与 [`src/app/page.js`](mdc:src/app/page.js) 中的状态管理逻辑紧密相关。

### 2.3. 预览区 (Preview Area)

*   **功能**: 实时或在处理后显示由后端生成的、带有内联样式的 HTML 结果。
*   **显示**: 渲染从 `/api/beautify` 返回的 `finalHtml`。这通常通过 `iframe` 或 `dangerouslySetInnerHTML` 实现。
*   **关联组件**: 可能是 `src/components/PreviewPane.js` 或类似组件。

### 2.4. 大纲区 (Outline Panel)

*   **功能**: 展示由后端生成的文档结构大纲，并可能提供点击跳转功能。
*   **显示**: 渲染从 `/api/beautify` 返回的 `documentOutline` JSON 数据，通常显示为可折叠的树状列表或嵌套列表。
*   **关联组件**: 可能是 `src/components/OutlineViewer.js` 或类似组件。

## 3. 底栏 (Footer) - 可选

*   **功能**: 显示版权信息、相关链接等。
*   **显示**: 简单的文本或链接。
*   **关联组件**: 可能是 `src/components/Footer.js` 或直接在 [`src/app/layout.js`](mdc:src/app/layout.js) 中实现。

## 整体布局协调

*   整体布局可能由主页面组件（例如 [`src/app/page.js`](mdc:src/app/page.js)）和根布局文件（[`src/app/layout.js`](mdc:src/app/layout.js)）共同管理。
*   Material UI (MUI) 的 Grid、Stack 或 Box 组件可能被用来组织这些模块。
*   状态管理（如用户输入的 Markdown、样式提示、API 返回结果等）可能集中在页面级组件 (`page.js`) 或通过 React Context/Zustand 等状态管理库实现。 