---
description:
globs:
alwaysApply: false
---
# 美化器多语言实现示例

本文档提供了美化器功能中多语言实现的示例代码和最佳实践。

## 美化器翻译键结构

```javascript
// zh-CN.js
export default {
  // ... 其他翻译 ...
  beautifier: {
    title: '代码美化',
    description: '自动格式化并美化您的代码',
    options: {
      indentSize: '缩进大小',
      tabWidth: '制表符宽度',
      useTabs: '使用制表符',
      semi: '使用分号',
      singleQuote: '使用单引号',
      trailingComma: '尾随逗号',
      bracketSpacing: '括号间距',
      arrowParens: '箭头函数括号',
    },
    actions: {
      format: '格式化',
      reset: '重置',
      copy: '复制',
      save: '保存',
      cancel: '取消',
    },
    messages: {
      success: '代码美化成功！',
      error: '代码美化失败: {error}',
      copied: '已复制到剪贴板',
      saved: '已保存到文件',
    },
    placeholders: {
      input: '在此粘贴您的代码...',
    }
  },
  // ... 其他翻译 ...
}

// en-US.js
export default {
  // ... 其他翻译 ...
  beautifier: {
    title: 'Code Beautifier',
    description: 'Automatically format and beautify your code',
    options: {
      indentSize: 'Indent Size',
      tabWidth: 'Tab Width',
      useTabs: 'Use Tabs',
      semi: 'Use Semicolons',
      singleQuote: 'Use Single Quotes',
      trailingComma: 'Trailing Comma',
      bracketSpacing: 'Bracket Spacing',
      arrowParens: 'Arrow Function Parentheses',
    },
    actions: {
      format: 'Format',
      reset: 'Reset',
      copy: 'Copy',
      save: 'Save',
      cancel: 'Cancel',
    },
    messages: {
      success: 'Code beautified successfully!',
      error: 'Failed to beautify code: {error}',
      copied: 'Copied to clipboard',
      saved: 'Saved to file',
    },
    placeholders: {
      input: 'Paste your code here...',
    }
  },
  // ... 其他翻译 ...
}
```

## 美化器组件实现示例

```jsx
import React, { useState } from 'react';
import { useTranslation } from '../i18n';
import { Button, Select, Input, Checkbox, notification } from '../components/ui';
import { formatCode } from '../utils/formatter';

const CodeBeautifier = () => {
  const { t } = useTranslation();
  const [code, setCode] = useState('');
  const [formattedCode, setFormattedCode] = useState('');
  const [options, setOptions] = useState({
    indentSize: 2,
    tabWidth: 2,
    useTabs: false,
    semi: true,
    singleQuote: false,
    trailingComma: 'es5',
    bracketSpacing: true,
    arrowParens: 'always',
  });

  const handleOptionChange = (option, value) => {
    setOptions({ ...options, [option]: value });
  };

  const handleFormat = async () => {
    try {
      const result = await formatCode(code, options);
      setFormattedCode(result);
      notification.success(t('beautifier.messages.success'));
    } catch (error) {
      notification.error(
        t('beautifier.messages.error', { error: error.message })
      );
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(formattedCode);
    notification.info(t('beautifier.messages.copied'));
  };

  const handleReset = () => {
    setCode('');
    setFormattedCode('');
  };

  return (
    <div className="beautifier-container">
      <h1>{t('beautifier.title')}</h1>
      <p>{t('beautifier.description')}</p>

      <div className="options-panel">
        <div className="option-group">
          <label>{t('beautifier.options.indentSize')}</label>
          <Select
            value={options.indentSize}
            onChange={(value) => handleOptionChange('indentSize', value)}
            options={[2, 4, 8].map(size => ({ value: size, label: size }))}
          />
        </div>

        <div className="option-group">
          <label>{t('beautifier.options.useTabs')}</label>
          <Checkbox
            checked={options.useTabs}
            onChange={(e) => handleOptionChange('useTabs', e.target.checked)}
          />
        </div>

        <div className="option-group">
          <label>{t('beautifier.options.singleQuote')}</label>
          <Checkbox
            checked={options.singleQuote}
            onChange={(e) => handleOptionChange('singleQuote', e.target.checked)}
          />
        </div>
        
        {/* 其他选项 */}
      </div>

      <div className="code-input">
        <Input.TextArea
          value={code}
          onChange={(e) => setCode(e.target.value)}
          placeholder={t('beautifier.placeholders.input')}
          rows={10}
        />
      </div>

      <div className="actions">
        <Button onClick={handleFormat} type="primary">
          {t('beautifier.actions.format')}
        </Button>
        <Button onClick={handleReset}>
          {t('beautifier.actions.reset')}
        </Button>
        {formattedCode && (
          <Button onClick={handleCopy}>
            {t('beautifier.actions.copy')}
          </Button>
        )}
      </div>

      {formattedCode && (
        <div className="formatted-output">
          <h3>{t('beautifier.result')}</h3>
          <pre>{formattedCode}</pre>
        </div>
      )}
    </div>
  );
};

export default CodeBeautifier;
```

## 多语言切换组件集成

```jsx
import React from 'react';
import { useTranslation, useLocale } from '../i18n';
import { Select } from '../components/ui';

// 美化器页面布局，包含语言切换器
const BeautifierLayout = ({ children }) => {
  const { t } = useTranslation();
  const { locale, setLocale, getLanguageOptions } = useLocale();

  return (
    <div className="beautifier-layout">
      <header>
        <h1>{t('beautifier.title')}</h1>
        <div className="language-selector">
          <Select
            value={locale}
            onChange={setLocale}
            options={getLanguageOptions()}
          />
        </div>
      </header>
      <main>
        {children}
      </main>
      <footer>
        {t('common.copyright', { year: new Date().getFullYear() })}
      </footer>
    </div>
  );
};

export default BeautifierLayout;
```

## 参数化翻译示例

```jsx
import React, { useState } from 'react';
import { useTranslation } from '../i18n';
import { Button, notification } from '../components/ui';

// 显示美化结果信息的组件
const BeautifyResultInfo = ({ language, timestamp }) => {
  const { t } = useTranslation();
  
  return (
    <div className="beautify-result-info">
      <p>
        {t('beautifier.resultInfo', { 
          language, 
          time: new Date(timestamp).toLocaleTimeString() 
        })}
      </p>
    </div>
  );
};

// zh-CN.js 中的对应翻译：
// resultInfo: '{language}代码美化完成于{time}'

// en-US.js 中的对应翻译：
// resultInfo: '{language} code beautified at {time}'
```

## 最佳实践总结

1. **保持翻译键结构一致**
   - 所有语言文件中使用相同的嵌套结构
   - 按功能模块组织翻译键

2. **使用参数化翻译**
   - 动态内容使用参数表示
   - 参数名称在所有语言文件中保持一致

3. **提取重复文本**
   - 常用文本（如按钮标签）放在common命名空间下
   - 避免重复定义相同的文本

4. **完整性检查**
   - 确保添加新功能时同时添加所有需要的翻译键
   - 定期检查和更新所有语言文件
