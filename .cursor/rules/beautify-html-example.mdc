---
description:
globs:
alwaysApply: false
---
# HTML 美化器实现示例

本文档提供了 HTML 美化器的详细实现方案和最佳实践。

## 核心功能

HTML 美化器应具备以下核心功能：

1. **HTML 格式化**：重新格式化 HTML 代码，包括缩进、换行和标签对齐
2. **代码压缩**：移除不必要的空白、注释和属性引号以减小文件大小
3. **标签自动闭合**：确保所有标签都正确闭合
4. **属性排序**：按照预定义规则对元素属性进行排序
5. **语法修复**：修复常见的 HTML 语法错误

## 美化配置选项

```javascript
const defaultHtmlBeautifyOptions = {
  indent_size: 2,               // 缩进大小
  indent_char: ' ',             // 缩进字符
  max_preserve_newlines: 1,     // 保留的最大连续空行数
  preserve_newlines: true,      // 是否保留原有的换行
  indent_inner_html: false,     // 是否缩进 <head> 和 <body> 部分
  brace_style: 'collapse',      // 括号样式 (collapse|expand|end-expand)
  wrap_line_length: 0,          // 每行最大字符数，0表示不换行
  wrap_attributes: 'auto',      // 属性换行 (auto|force|force-aligned|force-expand-multiline)
  unformatted: ['code', 'pre'], // 不格式化的标签列表
  extra_liners: ['head', 'body', '/html'], // 额外添加空行的标签
  end_with_newline: true,       // 文件末尾是否添加换行
  eol: '\n',                    // 换行符类型
  indent_scripts: 'normal',     // script标签缩进 (keep|separate|normal)
  inline: [],                   // 内联元素列表
};
```

## 示例实现

```javascript
import { html as beautifyHtml } from 'js-beautify';
import { parse, serialize } from 'parse5';
import { minify } from 'html-minifier-terser';

/**
 * HTML 美化处理函数
 * @param {string} html - 原始 HTML 代码
 * @param {Object} options - 美化选项
 * @returns {Promise<string>} - 美化后的 HTML 代码
 */
export async function beautifyHtmlCode(html, options = {}) {
  // 合并默认选项和用户选项
  const mergedOptions = { ...defaultHtmlBeautifyOptions, ...options };
  
  try {
    let result = html;
    
    // 修复和验证 HTML
    if (options.fixErrors) {
      // 使用 parse5 处理 HTML
      const document = parse(html);
      result = serialize(document);
    }
    
    // 格式化或压缩 HTML
    if (options.minify) {
      // 使用 html-minifier-terser 压缩 HTML
      result = await minify(result, {
        collapseWhitespace: true,
        removeComments: !options.preserveComments,
        removeAttributeQuotes: options.removeQuotes,
        removeEmptyAttributes: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortAttributes: options.sortAttributes,
        minifyCSS: options.minifyEmbeddedCSS,
        minifyJS: options.minifyEmbeddedJS,
        processConditionalComments: true,
      });
    } else {
      // 使用 js-beautify 格式化 HTML
      result = beautifyHtml(result, {
        indent_size: mergedOptions.indent_size,
        indent_char: mergedOptions.indent_char,
        max_preserve_newlines: mergedOptions.max_preserve_newlines,
        preserve_newlines: mergedOptions.preserve_newlines,
        indent_inner_html: mergedOptions.indent_inner_html,
        brace_style: mergedOptions.brace_style,
        wrap_line_length: mergedOptions.wrap_line_length,
        wrap_attributes: mergedOptions.wrap_attributes,
        unformatted: mergedOptions.unformatted,
        extra_liners: mergedOptions.extra_liners,
        end_with_newline: mergedOptions.end_with_newline,
        eol: mergedOptions.eol,
        indent_scripts: mergedOptions.indent_scripts,
        inline: mergedOptions.inline,
      });
    }
    
    return result;
  } catch (error) {
    console.error('HTML 美化失败:', error);
    throw new Error(`HTML 美化失败: ${error.message}`);
  }
}

/**
 * 检查 HTML 代码中的错误
 * @param {string} html - HTML 代码
 * @returns {Array} - 错误列表
 */
export function validateHtml(html) {
  // 使用适当的 HTML 验证库实现此功能
  // 这里仅为示例

  const errors = [];
  try {
    // 检查未闭合标签
    const unclosedTags = findUnclosedTags(html);
    unclosedTags.forEach(tag => {
      errors.push({
        type: 'unclosed-tag',
        message: `未闭合的标签: <${tag.name}>`,
        line: tag.line,
        column: tag.column
      });
    });
    
    // 检查无效的嵌套
    const invalidNestings = findInvalidNestings(html);
    invalidNestings.forEach(nesting => {
      errors.push({
        type: 'invalid-nesting',
        message: `无效的标签嵌套: <${nesting.parent}> 内不能包含 <${nesting.child}>`,
        line: nesting.line,
        column: nesting.column
      });
    });
    
    // 其他验证...
  } catch (error) {
    errors.push({
      type: 'parse-error',
      message: `解析错误: ${error.message}`,
      line: 0,
      column: 0
    });
  }
  
  return errors;
}

// 工具函数示例（实际实现中需要完善）
function findUnclosedTags(html) {
  // 实现查找未闭合标签的逻辑
  return [];
}

function findInvalidNestings(html) {
  // 实现查找无效嵌套的逻辑
  return [];
}
```

## React 组件实现

```jsx
import React, { useState, useEffect } from 'react';
import { beautifyHtmlCode, validateHtml } from '../utils/html-beautifier';
import { Button, Checkbox, Input, Select, Tabs, Alert, Tooltip } from '../components/ui';
import { useTranslation } from '../i18n';

const HtmlBeautifier = () => {
  const { t } = useTranslation();
  const [htmlInput, setHtmlInput] = useState('');
  const [beautifiedHtml, setBeautifiedHtml] = useState('');
  const [errors, setErrors] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [activeTab, setActiveTab] = useState('beautify');
  const [options, setOptions] = useState({
    indent_size: 2,
    indent_char: ' ',
    preserve_newlines: true,
    max_preserve_newlines: 1,
    indent_inner_html: false,
    brace_style: 'collapse',
    wrap_line_length: 0,
    wrap_attributes: 'auto',
    minify: false,
    fixErrors: true,
    sortAttributes: false,
    preserveComments: true,
    removeQuotes: false,
    minifyEmbeddedCSS: true,
    minifyEmbeddedJS: true,
  });

  // 处理选项更改
  const handleOptionChange = (option, value) => {
    setOptions({ ...options, [option]: value });
  };

  // 处理美化
  const handleBeautify = async () => {
    if (!htmlInput.trim()) return;

    setIsProcessing(true);
    setErrors([]);

    try {
      // 验证 HTML
      const validationErrors = validateHtml(htmlInput);
      setErrors(validationErrors);

      // 即使有错误也尝试美化
      const result = await beautifyHtmlCode(htmlInput, options);
      setBeautifiedHtml(result);
    } catch (error) {
      console.error(error);
      setErrors([
        ...errors,
        {
          type: 'process-error',
          message: error.message,
          line: 0,
          column: 0
        }
      ]);
    } finally {
      setIsProcessing(false);
    }
  };

  // 复制结果
  const handleCopyResult = () => {
    navigator.clipboard.writeText(beautifiedHtml);
    alert(t('htmlBeautifier.messages.copied'));
  };

  // 清空输入
  const handleClearInput = () => {
    setHtmlInput('');
    setBeautifiedHtml('');
    setErrors([]);
  };

  // 切换到压缩模式
  useEffect(() => {
    if (options.minify) {
      // 压缩模式下的默认选项
      setOptions(prev => ({
        ...prev,
        preserve_newlines: false,
        wrap_line_length: 0,
      }));
    }
  }, [options.minify]);

  return (
    <div className="html-beautifier">
      <h1>{t('htmlBeautifier.title')}</h1>
      <p>{t('htmlBeautifier.description')}</p>

      <Tabs 
        activeKey={activeTab} 
        onChange={setActiveTab}
        items={[
          { key: 'beautify', label: t('htmlBeautifier.tabs.beautify') },
          { key: 'options', label: t('htmlBeautifier.tabs.options') }
        ]}
      />

      {activeTab === 'options' && (
        <div className="options-panel">
          <div className="option-group">
            <h3>{t('htmlBeautifier.optionsTitle')}</h3>
            
            <div className="option">
              <label>{t('htmlBeautifier.options.minify')}</label>
              <Checkbox
                checked={options.minify}
                onChange={(e) => handleOptionChange('minify', e.target.checked)}
              />
              <Tooltip title={t('htmlBeautifier.tooltips.minify')}>
                <span className="help-icon">?</span>
              </Tooltip>
            </div>
            
            {!options.minify && (
              <>
                <div className="option">
                  <label>{t('htmlBeautifier.options.indentSize')}</label>
                  <Select
                    value={options.indent_size}
                    onChange={(value) => handleOptionChange('indent_size', value)}
                    options={[2, 4, 8].map(size => ({ label: size, value: size }))}
                  />
                </div>
                
                <div className="option">
                  <label>{t('htmlBeautifier.options.preserveNewlines')}</label>
                  <Checkbox
                    checked={options.preserve_newlines}
                    onChange={(e) => handleOptionChange('preserve_newlines', e.target.checked)}
                  />
                </div>
                
                <div className="option">
                  <label>{t('htmlBeautifier.options.indentInnerHtml')}</label>
                  <Checkbox
                    checked={options.indent_inner_html}
                    onChange={(e) => handleOptionChange('indent_inner_html', e.target.checked)}
                  />
                </div>
                
                <div className="option">
                  <label>{t('htmlBeautifier.options.braceStyle')}</label>
                  <Select
                    value={options.brace_style}
                    onChange={(value) => handleOptionChange('brace_style', value)}
                    options={[
                      { label: t('htmlBeautifier.options.braceStyleOptions.collapse'), value: 'collapse' },
                      { label: t('htmlBeautifier.options.braceStyleOptions.expand'), value: 'expand' },
                      { label: t('htmlBeautifier.options.braceStyleOptions.endExpand'), value: 'end-expand' }
                    ]}
                  />
                </div>
                
                <div className="option">
                  <label>{t('htmlBeautifier.options.wrapLineLength')}</label>
                  <Input
                    type="number"
                    value={options.wrap_line_length}
                    onChange={(e) => handleOptionChange('wrap_line_length', parseInt(e.target.value) || 0)}
                    min={0}
                    max={200}
                  />
                </div>
                
                <div className="option">
                  <label>{t('htmlBeautifier.options.wrapAttributes')}</label>
                  <Select
                    value={options.wrap_attributes}
                    onChange={(value) => handleOptionChange('wrap_attributes', value)}
                    options={[
                      { label: t('htmlBeautifier.options.wrapAttributesOptions.auto'), value: 'auto' },
                      { label: t('htmlBeautifier.options.wrapAttributesOptions.force'), value: 'force' },
                      { label: t('htmlBeautifier.options.wrapAttributesOptions.forceAligned'), value: 'force-aligned' },
                      { label: t('htmlBeautifier.options.wrapAttributesOptions.forceExpandMultiline'), value: 'force-expand-multiline' }
                    ]}
                  />
                </div>
              </>
            )}
            
            <div className="option">
              <label>{t('htmlBeautifier.options.fixErrors')}</label>
              <Checkbox
                checked={options.fixErrors}
                onChange={(e) => handleOptionChange('fixErrors', e.target.checked)}
              />
              <Tooltip title={t('htmlBeautifier.tooltips.fixErrors')}>
                <span className="help-icon">?</span>
              </Tooltip>
            </div>
            
            <div className="option">
              <label>{t('htmlBeautifier.options.preserveComments')}</label>
              <Checkbox
                checked={options.preserveComments}
                onChange={(e) => handleOptionChange('preserveComments', e.target.checked)}
              />
            </div>
            
            <div className="option">
              <label>{t('htmlBeautifier.options.sortAttributes')}</label>
              <Checkbox
                checked={options.sortAttributes}
                onChange={(e) => handleOptionChange('sortAttributes', e.target.checked)}
              />
            </div>
            
            {options.minify && (
              <div className="option">
                <label>{t('htmlBeautifier.options.removeQuotes')}</label>
                <Checkbox
                  checked={options.removeQuotes}
                  onChange={(e) => handleOptionChange('removeQuotes', e.target.checked)}
                />
                <Tooltip title={t('htmlBeautifier.tooltips.removeQuotes')}>
                  <span className="help-icon">?</span>
                </Tooltip>
              </div>
            )}
            
            <div className="option">
              <label>{t('htmlBeautifier.options.minifyEmbeddedCSS')}</label>
              <Checkbox
                checked={options.minifyEmbeddedCSS}
                onChange={(e) => handleOptionChange('minifyEmbeddedCSS', e.target.checked)}
              />
            </div>
            
            <div className="option">
              <label>{t('htmlBeautifier.options.minifyEmbeddedJS')}</label>
              <Checkbox
                checked={options.minifyEmbeddedJS}
                onChange={(e) => handleOptionChange('minifyEmbeddedJS', e.target.checked)}
              />
            </div>
          </div>
        </div>
      )}

      {activeTab === 'beautify' && (
        <div className="input-output-container">
          <div className="input-panel">
            <h3>{t('htmlBeautifier.inputTitle')}</h3>
            <Input.TextArea
              value={htmlInput}
              onChange={(e) => setHtmlInput(e.target.value)}
              placeholder={t('htmlBeautifier.placeholders.input')}
              rows={15}
            />
          </div>
          
          {errors.length > 0 && (
            <div className="errors-panel">
              <Alert
                type="warning"
                message={t('htmlBeautifier.validationTitle')}
                description={
                  <ul className="error-list">
                    {errors.map((error, index) => (
                      <li key={index}>
                        {error.line > 0 ? `[${error.line}:${error.column}] ` : ''}
                        {error.message}
                      </li>
                    ))}
                  </ul>
                }
              />
            </div>
          )}
          
          <div className="actions">
            <Button 
              onClick={handleBeautify} 
              disabled={isProcessing || !htmlInput.trim()}
              loading={isProcessing}
              type="primary"
            >
              {options.minify 
                ? t('htmlBeautifier.actions.minify') 
                : t('htmlBeautifier.actions.beautify')}
            </Button>
            
            <Button onClick={handleClearInput}>
              {t('htmlBeautifier.actions.clearInput')}
            </Button>
            
            {beautifiedHtml && (
              <Button onClick={handleCopyResult}>
                {t('htmlBeautifier.actions.copy')}
              </Button>
            )}
          </div>
          
          {beautifiedHtml && (
            <div className="output-panel">
              <h3>{t('htmlBeautifier.outputTitle')}</h3>
              <pre className="beautified-html">{beautifiedHtml}</pre>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default HtmlBeautifier;
```

## 翻译示例

```javascript
// zh-CN.js
export default {
  htmlBeautifier: {
    title: 'HTML 美化器',
    description: '格式化、压缩和修复您的 HTML 代码',
    optionsTitle: '美化选项',
    inputTitle: '输入 HTML',
    outputTitle: '美化后的 HTML',
    validationTitle: '验证结果',
    tabs: {
      beautify: '美化',
      options: '选项'
    },
    options: {
      minify: '压缩模式',
      indentSize: '缩进大小',
      preserveNewlines: '保留换行',
      indentInnerHtml: '缩进内部 HTML',
      braceStyle: '大括号样式',
      braceStyleOptions: {
        collapse: '折叠',
        expand: '展开',
        endExpand: '末尾展开'
      },
      wrapLineLength: '行包装长度',
      wrapAttributes: '属性换行',
      wrapAttributesOptions: {
        auto: '自动',
        force: '强制',
        forceAligned: '强制对齐',
        forceExpandMultiline: '强制多行展开'
      },
      fixErrors: '修复错误',
      preserveComments: '保留注释',
      sortAttributes: '属性排序',
      removeQuotes: '移除引号',
      minifyEmbeddedCSS: '压缩内嵌 CSS',
      minifyEmbeddedJS: '压缩内嵌 JS'
    },
    tooltips: {
      minify: '压缩模式将移除所有不必要的空白和格式化',
      fixErrors: '尝试修复常见的 HTML 语法错误',
      removeQuotes: '移除 HTML 属性周围不必要的引号'
    },
    actions: {
      beautify: '美化',
      minify: '压缩',
      clearInput: '清空输入',
      copy: '复制结果'
    },
    placeholders: {
      input: '在此粘贴您的 HTML 代码...'
    },
    messages: {
      copied: '已复制到剪贴板！'
    }
  }
}

// en-US.js
export default {
  htmlBeautifier: {
    title: 'HTML Beautifier',
    description: 'Format, minify and fix your HTML code',
    optionsTitle: 'Beautify Options',
    inputTitle: 'Input HTML',
    outputTitle: 'Beautified HTML',
    validationTitle: 'Validation Results',
    tabs: {
      beautify: 'Beautify',
      options: 'Options'
    },
    options: {
      minify: 'Minify Mode',
      indentSize: 'Indent Size',
      preserveNewlines: 'Preserve Newlines',
      indentInnerHtml: 'Indent Inner HTML',
      braceStyle: 'Brace Style',
      braceStyleOptions: {
        collapse: 'Collapse',
        expand: 'Expand',
        endExpand: 'End Expand'
      },
      wrapLineLength: 'Wrap Line Length',
      wrapAttributes: 'Wrap Attributes',
      wrapAttributesOptions: {
        auto: 'Auto',
        force: 'Force',
        forceAligned: 'Force Aligned',
        forceExpandMultiline: 'Force Expand Multiline'
      },
      fixErrors: 'Fix Errors',
      preserveComments: 'Preserve Comments',
      sortAttributes: 'Sort Attributes',
      removeQuotes: 'Remove Quotes',
      minifyEmbeddedCSS: 'Minify Embedded CSS',
      minifyEmbeddedJS: 'Minify Embedded JS'
    },
    tooltips: {
      minify: 'Minify mode removes all unnecessary whitespace and formatting',
      fixErrors: 'Attempts to fix common HTML syntax errors',
      removeQuotes: 'Removes unnecessary quotes around HTML attributes'
    },
    actions: {
      beautify: 'Beautify',
      minify: 'Minify',
      clearInput: 'Clear Input',
      copy: 'Copy Result'
    },
    placeholders: {
      input: 'Paste your HTML code here...'
    },
    messages: {
      copied: 'Copied to clipboard!'
    }
  }
}
```

## 最佳实践

1. **安全考虑**
   - 避免在客户端执行不安全的 HTML 解析操作
   - 使用防 XSS 机制净化用户输入的 HTML 代码

2. **性能优化**
   - 采用 Web Workers 处理大型 HTML 文件
   - 对大型代码实现延迟加载和分块处理

3. **兼容性**
   - 支持不同的 HTML 标准（HTML4、HTML5、XHTML）
   - 处理非标准 HTML 标签和属性

4. **错误处理**
   - 提供详细的错误报告，包括位置和修复建议
   - 实现可视化错误标记和突出显示

5. **可访问性**
   - 键盘导航支持
   - 支持屏幕阅读器
   - 提供足够的对比度和可识别的组件状态

6. **国际化**
   - 所有用户界面文本均支持多语言
   - 支持不同语言环境的错误消息和提示
